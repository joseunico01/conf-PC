{
  "Flutter_drawer": {
    "prefix": "drawer",
    "description": "Insert drawer",
    "body": [
      "class $1 extends StatefulWidget {",
      "  const $1({ Key? key }) : super(key: key);",
      "",
      "  @override",
      "  _$1State createState() => _$1State();",
      "}",
      "",
      "class _$1State extends State<$1> {",
      "Drawer _getDrawer(BuildContext context) {",
      "//Encabezado de Drawer",
      "var header = DrawerHeader(child: Text('Ajustes'));",
      "//Informacion de mi App, en Drawer",
      "var info = AboutListTile(",
      "child: Text('Informacion App'),",
      "applicationVersion: 'v1.0.0',",
      "applicationName: 'Demo Drawer',",
      "//Icono mostrado en la ventana emergente de info",
      "applicationIcon: Icon(Icons.favorite),",
      "icon: Icon(Icons.info),",
      ");",
      "",
      "//Abreviacion de mi ListTile",
      "ListTile _getItem(Icon icon, String description, String route) {",
      "return ListTile(",
      "leading: icon,",
      "title: Text(description),",
      "onTap: () {",
      "setState(() {",
      "Navigator.of(context).pushNamed(route);",
      "});",
      "});",
      "}",
      "",
      "ListView listView = ListView(",
      "children: [",
      "header,",
      "_getItem(Icon(Icons.settings), 'Configuracion', '/configuracion'),",
      "_getItem(Icon(Icons.home), 'Pagina Principal', '/'),",
      "info,",
      "],",
      ");",
      "",
      "return Drawer(",
      "child: listView,",
      ");",
      "}",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "         title: Text('titulo'),",
      "    ),",
      "    drawer: _getDrawer(context)",
      "    );",
      "  }",
      "}",
      "",
      "//void main() {",
      "//runApp(MaterialApp(",
      "//home: Home(),",
      "//routes: <String, WidgetBuilder>{",
      "//Settings.routeName: (BuildContext context) => Settings(),",
      "//Battery.routeName: (BuildContext context) => Battery(),",
      "//},",
      "//));",
      "//}",
      "",
      "//Aca esta el entutamiento de cada link",
      "//static const String routeName = '/bateria';"
    ]
  },

  "Flutter stateless widget": {
    "prefix": "StatelessWidget",
    "description": "Insert a StatelessWidget",
    "body": [
      "class $1 extends StatelessWidget {",
      "  const $1({ Key? key }) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      $2",
      "    );",
      "  }",
      "}"
    ]
  },
  "Flutter mateaApp": {
    "prefix": "mateapp",
    "description": "Insert struct basic",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main()=> runApp(MyApp());",
      "",
      "class MyApp extends StatelessWidget {",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "       debugShowCheckedModeBanner: false,",
      "       title: 'Material App',",
      "       initialRoute: '$1',",
      "       routes: {",
      "         '$1': (BuildContext context)=> $2(),",
      "     },",
      "    );",
      "  }",
      "}"
    ]
  },
  "Flutter_SnackBar": {
    "prefix": "showSnackBar",
    "description": "Insert show Snackbar",
    "body": [
      "return RaisedButton(",
      "child: Text('Desplegar Snackbar'),",
      "onPressed: () {",
      "  Scaffold.of(context).showSnackBar(SnackBar(",
      "   content: Text('hola soy un showSnackBar :)'),",
      "    duration: Duration(seconds: 5),",
      "      action: SnackBarAction(",
      "label: 'Click Aqui',",
      "onPressed: () {",
      "Scaffold.of(context).showSnackBar(SnackBar(",
      "content: Text('Hola Soy yo nuevamente.... XD'),",
      "));",
      "},",
      "),",
      "));",
      "},",
      ");"
    ]
  },
  "Flutter_TabBar": {
    "prefix": "initState_TabBar",
    "description": "Insert a TabBar",
    "body": [
      "",
      "//class _MyTabsState extends State<MyTabs> with SingleTickerProviderStateMixin {",
      "  late $TabController $1 ;",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    $1 = $TabController(length: $2,vsync: this);",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "         title: Text('titulo'),",
      "         bottom: TabBar(",
      "           tabs: [",
      "             Tab ( icon: Icon(Icons.home) ),",
      "           ],",
      "           controller: controller,",
      "           ),",
      "           ),",
      "           body: TabBarView(",
      "             children: [],",
      "           controller: controller,",
      "           ),",
      "           );",
      "  }",
      "}"
    ]
  },
  "Flutter_bottomNavigationBar": {
    "prefix": "initState_bottomNavigationBar",
    "description": "Insert a Tab bottomNavigationBar",
    "body": [
      "",
      "//class _MyTabsState extends State<MyTabs> with SingleTickerProviderStateMixin {",
      "  late $TabController $1 ;",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    $1 = $TabController(length: $2,vsync: this);",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "         title: Text('titulo'),",
      "           ),",
      "           body: TabBarView(",
      "             children: [],",
      "           controller: controller,",
      "           ),",
      "           bottomNavigationBar: Material(",
      "           color: Colors.blueGrey,",
      "           child: TabBar(",
      "           tabs: [ Tab( icon: Icon(Icons.watch), ), ],",
      "           controller: controller,",
      "           )",
      "           )",
      "           );",
      "  }",
      "}"
    ]
  },
  "Flutter stateful widget": {
    "prefix": "StatefulWidget",
    "description": "Insert a StatefulWidget",
    "body": [
      "class $1 extends StatefulWidget {",
      "  const $1({ Key? key }) : super(key: key);",
      "",
      "  @override",
      "  _$1State createState() => _$1State();",
      "}",
      "",
      "class _$1State extends State<$1> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      $2",
      "    );",
      "  }",
      "}"
    ]
  },
  "Flutter widget with AnimationController": {
    "prefix": "stanim",
    "description": "Insert a StatefulWidget with an AnimationController",
    "body": [
      "class $1 extends StatefulWidget {",
      "  const $1({ Key? key }) : super(key: key);",
      "",
      "  @override",
      "  _$1State createState() => _$1State();",
      "}",
      "",
      "class _$1State extends State<$1>",
      "    with SingleTickerProviderStateMixin {",
      "  late AnimationController _controller;",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _controller = AnimationController(vsync: this);",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    super.dispose();",
      "    _controller.dispose();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      $2",
      "    );",
      "  }",
      "}"
    ]
  },
  "main": {
    "prefix": "main",
    "description": "Insert a main function, used as an entry point.",
    "body": ["void main() {", "  $0", "}"]
  },
  "try": {
    "prefix": "try",
    "description": "Insert a try/catch block.",
    "body": ["try {", "  $0", "} catch (${1:e}) {", "}"]
  },
  "if": {
    "prefix": "if",
    "description": "Insert an if statement.",
    "body": ["if ($1) {", "  $0", "}"]
  },
  "if else": {
    "prefix": "ife",
    "description": "Insert an if statement with an else block.",
    "body": ["if ($1) {", "  $0", "} else {", "}"]
  },
  "switch case": {
    "prefix": "switch",
    "description": "Insert a switch statement.",
    "body": [
      "switch ($1) {",
      "  case $2:",
      "    $0",
      "    break;",
      "  default:",
      "}"
    ]
  },
  "for": {
    "prefix": "for",
    "description": "Insert a for loop.",
    "body": ["for (var i = 0; i < ${1:count}; i++) {", "  $0", "}"]
  },
  "for in": {
    "prefix": "fori",
    "description": "Insert a for-in loop.",
    "body": ["for (var ${1:item} in ${2:items}) {", "  $0", "}"]
  },
  "while": {
    "prefix": "while",
    "description": "Insert a while loop.",
    "body": ["while ($1) {", "  $0", "}"]
  },
  "do while": {
    "prefix": "do",
    "description": "Insert a do-while loop.",
    "body": ["do {", "  $0", "} while ($1);"]
  },
  "fun": {
    "prefix": "fun",
    "description": "Insert a function definition.",
    "body": ["${3:void} ${1:name}(${2:args}) {", "  $0", "}"]
  },
  "class": {
    "prefix": "class",
    "description": "Insert a class definition.",
    "body": ["class ${1:Name} {", "  $0", "}"]
  },
  "typedef": {
    "prefix": "typedef",
    "description": "Insert a typedef.",
    "body": "typedef ${1:Type} ${2:Name}(${3:params});"
  },
  "test": {
    "prefix": "test",
    "description": "Insert a test block.",
    "body": ["test('$1', () {", "  $0", "});"]
  },
  "group": {
    "prefix": "group",
    "description": "Insert a test group block.",
    "body": ["group('$1', () {", "  $0", "});"]
  }
}

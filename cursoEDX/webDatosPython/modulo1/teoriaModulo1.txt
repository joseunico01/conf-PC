#me en webscrapping-modulo2
___________________________________________________________________________
###########################################################################
===========================================================================
 TCP/IP 
################################# INICIO ##################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
description: comandos ping google.com ////traceroute google.com
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
El comando PING tiene una variedad de opciones que permiten ajustar su 
comportamiento dependiendo de nuestras necesidades. En particular las 
opciones del número de respuestas que se desean y el tamaño de los mensajes
enviados son vitales para poder diagnosticar posibles problemas en la red.

En el caso de TRACEROUTE, las opciones que son de mayor relevancia 
es el poder determinar el número máximo de “saltos” entre nosotros y el 
destino, es decir, cuantos servidores intermedios puede contener la ruta;
además, se puede especificar una lista de IPs como sugerencia en la ruta. 
En conjunto, esto permite utilizar este comando para un diagnóstico más
completo e íntegro.

############################################################### FIN #######


___________________________________________________________________________
###########################################################################
===========================================================================
  HTTP
################################# INICIO ##################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
DESCRIPTION: TEMA GENERAL DE HTTP
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  Supongamos que una página consiste en un archivo HTML y 10 imágenes JPEG
  , y los 11 objetos se encuentran almacenados en el mismo servidor. Además,
  consideremos que la URL para el archivo HTML es:
http://www.escuela.edu/departamento/home.index

-A continuación, se describen los eventos que ocurren para acceder a la 
página siguientes el protocolo HTTP:
-El cliente inicia el proceso de conexión TCP al servidor www.escuela.edu 
en el puerto número 80, el cual es el valor por defecto para HTTP.
-El cliente envía una petición HTTP al servidor. El mensaje incluye la ruta 
/departamento/home.index
-El servidor recibe el mensaje de petición, recupera el objeto /departamento
/home.index de su almacenamiento, lo encapsula dentro de un mensaje de respuesta, y es enviado al cliente.
-El servidor cierra la conexión TCP una vez que el cliente ha confirmado 
la recepción correcta del mensaje.
-El cliente recibe el mensaje de respuesta, el cual indica que el objeto 
es un archivo HTML, extrayéndose e identificando referencias a 10 objetos JPEG.
-Los primeros cuatro pasos se repiten para solicitar los objetos faltantes
  
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
DESCRIPTION: ERRORES EN HTTP 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-200 OK: La petición se ejecutó exitosamente y la información es devuelta en la respuesta.
-301 Moved Permanently: El objeto requerido se ha movido permanentemente 
y la nueva URL está especificada en la línea del encabezado Location. El navegador del cliente automáticamente accede a la nueva dirección.
-400 Bad Request: Este es un código de error genérico indicando que la 
petición no pudo ser entendida por el servidor.
-404 Not Found: El documento solicitado no existe en el servidor.
-505 HTTP Version Not Supported: La versión del HTTP no es soportada por el servidor.
############################################################### FIN #######







###########################################################################
===========================================================================
  CURSO DE ACCEDIENDO A LOS DATOS DE LA WEB CON PYTHON: WEB SCRAPPING Y APIS
################################# INICIO ##################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
DESCRIPTION: EXPRESIONES REGULARES
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
import re
sentence = “¡Oh amor mío, esposa mía! La muerte, que ha 
extraído la miel de tu aliento, no ha tenido poder aún sobre 
tu hermosura; no has sido vencida; el carmín, distintivo de la 
belleza, luce en tus labios y mejillas, do aún no ondea la 
pálida enseña de la muerte. -¡Oh, Julieta!, ¿por qué luces tan 
encantadora todavía? -Aquí, aquí voy a establecer mi eternal 
permanencia, a sacudir del yugo de las estrellas enemigas este 
cuerpo cansado de vivir.”
matches = re.findall(r'\ba\w{3}\b',sentence)
print(matches)
  ----------------
  ejemplo.py
  ----------------

EXPRESIONES REGULARES
Las Expresiones Regulares, comúnmente conocidas como Regex (Regular Expression), son secuencias de caracteres que sirven para especificar un patrón de búsqueda en un texto o cadena de caracteres. Python posee un módulo dedicado a la creación y uso de Expresiones Regulares (re) (https://docs.python.org/library/re.html).
Una Expresión Regular está integrada generalmente por caracteres ordinarios y especiales. La siguiente expresión regular incluye el literal 'a', los operadores ‘\w’ y ‘\b’ que permiten indicar coincidencias predefinidas y el calificador de repetición ‘*’.

r'\ba\w*'

La expresión anterior puede utilizarse para buscar palabras que empiecen con a y posterior a ella se tengan cero o más caracteres alfanuméricos (incluyendo el guión bajo). La Tabla 1 presenta las coincidencias predefinidas y la Tabla 2 una lista de los caracteres especiales más utilizados.

ELEMENTO	DESCRIPCIÓN
.	Este carácter coincide con cualquier carácter excepto una nueva línea.
\d	Este carácter coincide con cualquier dígito decimal.
\D	Este carácter coincide con cualquiera que no sea un dígito.
\s	Este carácter coincide con cualquier carácter de espacio en blanco (\t, \n, \r, \f, \v)
\S	Este carácter coincide con cualquier carácter que no sea espacio en blanco (\t, \n, \r, \f, \v)
\w	Este carácter coincide con cualquier carácter alfanumérico incluyendo el guión bajo.
\W	Este carácter coincide con cualquier carácter que no sea alfanumérico, ni guión bajo.

Tabla 1
CARÁCTER ESPECIAL	DESCRIPCIÓN 
^ (caret)	Indica búsqueda de coincidencias al inicio de la cadena.
$	Indica búsqueda de coincidencias al final de la cadena o justo antes de una nueva línea al final de la cadena.
*	Indica búsqueda de coincidencias con 0 o más repeticiones del carácter que lo precede.
+	Indica búsqueda de coincidencias con 1 o más repeticiones del carácter anterior.
?	Indica búsqueda de coincidencias con 0 o 1 repetición del carácter que lo precede.
{m}	Indica búsqueda de coincidencias con m repeticiones del carácter que lo precede.
{m,n}	Indica búsqueda de coincidencias entre m y n repeticiones del carácter que lo precede.

Tabla 2
Tal como puede darse cuenta, las expresiones regulares hacen uso extensivo de las barras invertidas (‘\’, backslash). ¡Pero las barras invertidas son un carácter de escape en Python! De modo que si se encuentra un “\n” se interpretaría como una línea nueva. Sin embargo, Python admite cadenas sin formato (raw strings) en las cuales las barras invertidas no se interpretan como caracteres de escape. Las cadenas sin formato se definen colocando el carácter r inmediatamente antes de las comillas de apertura.
Existen diferentes funciones en la biblioteca re que nos permiten la búsqueda, división y reemplazo de cadenas de caracteres basados en la coincidencia. En esta unidad se han utilizado la función re.findall()
re.findall(pattern, string): Devuelve todas las coincidencias no superpuestas del patrón (pattern) en la cadena de caracteres dada (string) como una lista de cadenas de caracteres. La cadena es escaneada de izquierda a derecha, y las coincidencias son devuelvas en el orden de aparición.
Observa, que si quisiéramos encontrar palabras de 4 letras que inicien con a, entonces es posible indicar el límite de la palabra al inicio y fin de la expresión regular:

r'\ba\w{3}\b'
############################################################### FIN #######


___________________________________________________________________________
###########################################################################
===========================================================================
  Urllib
################################# INICIO ##################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
description: q es, un paquete de python
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
El módulo urllib es un paquete estándar de Python que contiene diferentes submódulos para establecer una comunicación HTTP. De acuerdo a su documentación (https://docs.python.org/3/library/urllib.html#module-urllib), los principales submódulos son los siguientes:

urllib.request permite la apertura y lectura de URL, así como permite solicitar o acceder a recursos en la red.
urllib.error que contiene la excepciones generadas por urllib.request.
urllib.parse que permite analizar (parsing) URLs.
Existen múltiples funciones para el manejo de la información resultante de las solicitudes y para procesar las respuestas como son urlopen(), getcode(), getheaders(), getheader(), geturl(), read(), entre otros. La descripción de estas funciones se encuentra en la tabla a continuación.

FUNCIÓN	DESCRIPCIÓN
urlopen(url)	Función que toma una url como argumento para realizar una petición y devuelve la respuesta obtenida como un objeto urllib.request
read()	El contenido de los objetos urllib.request puede accederse mediante el método read().
getcode()	Si la solicitud fue exitosa y se recibió una respuesta. Entonces, es posible checar el HTTP status mediante esta función.
geturl()	Devuelve la actual URL.
getheaders()	Devuelve una lista con tuplas que contienen encabezados HTTP.
getheader(header)	Los encabezados pueden recuperarse de forma individual con getheader() pasando como argumento el identificador.

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
description: ejemplo.py 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
import urllib.request
url = 'https://www.google.com'
 
# response almacena la respuesta a la solicitud hecha a la URL
response = urllib.request.urlopen(url)
print("response: ")
print(type(response))
print()
 
# Lectura de la respuesta obtenida 
print("read(): ")
print(response.read())
print()
 
# HTTP Status
print("getcode(): ")
print(response.getcode())
print()
 
# Verificación de la URL actual
print("geturl()")
print(response.geturl())
print()
 
# Obtención de encabezados HTTP
print("getheaders()")
print(response.getheaders())
print()
 
# Obtención del encabezado específico ‘content type’
print("getheader()")
print(response.getheader("Content-Type"))
############################################################### FIN #######



___________________________________________________________________________
###########################################################################
===========================================================================
  CLASES DE CARACTERES
################################# INICIO ##################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
DESCRIPTION: CARACTERES
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Las clases de caracteres permiten identificar grupos específicos de caracteres
a ser buscados. Estos se definen utilizando corchetes [] y añadiendo los caracteres a tomar en cuenta. Los caracteres pueden enlistarse de forma individual. La expresión regular r'[adf]' coincidirá con caracteres que correspondan a 'a', 'd' o 'f'.
Rangos de caracteres pueden indicarse mediante dos caracteres y separándolos
con un guión medio -. La expresión regular r'[a-z]' buscará coincidencias con letras ASCII en minúsculas, r'[4-8][0-9]' buscará coincidencias con números entre 40 y 89; y r'[a-z0-9]' buscará coincidencias con letras minúsculas o dígitos. En la siguiente tabla se muestran algunos ejemplos comunes de clases de caracteres:

[a-z]	Identificará caracteres que sean letras minúsculas de la a a la z.
[0-9]	Identificará caracteres que sean dígitos desde el 0 hasta el 9
[a-zA-Z]	Identificará caracteres que sean letras tanto en mayúscula como en minúscula.
Los caracteres especiales pierden su significado especial dentro de estos conjuntos. Por ejemplo '+', '*' o '.'. Por otro lado, las clases de caracteres como \w o \S también pueden ser utilizadas dentro de los conjuntos. Por ejemplo, la expresión regular r'[\w+.]' coincidirá con un caracter alfanumérico, el signo de adición (+) o el punto (.).

¡Incluso es posible hacer negaciones! Esto es posible utilizando el símbolo ^. De modo que r'[^0-9]' buscará coincidencias con caracteres que no sean dígitos.
A continuación encontrarás cuatro ejemplos de expresiones regulares y las cadenas que encontraría, los cuales están basados en el contenido que hemos visto en estas últimas dos unidades.
Si usamos el símbolo caret ^ fuera de los corchetes e.g., r'^Python', nos buscará todas las coincidencias que comiencen con la palabra que le proporcionamos, en este caso Python.
De la misma manera, si usamos el símbolo dólar $ al final de la expresión regular, e.g., r'edX$', nos buscará todas las coincidencias que terminen con la palabra que le proporcionamos, en este caso edX.
Podemos combinar estas dos expresiones regulares, si usamos el símbolo barra vertical (pipe symbol) |, e.g., r'^Python|edX^' nos buscará todas las coincidencias que comiencen con la palabra Python o todas las palabras que terminen con edX. Por lo tanto, el símbolo barra vertical (pipe symbol) | significa "o".
Usando los paréntesis podemos agrupar los caracteres, e.g., r'(x|y|z)a', esta regular expresión va a encontrar las siguientes coincidencias 'xa', 'ya' y 'za'.
El símbolo llaves {} , nos permite definir un rango de apariciones, e.g., r'a{3,5}', esta expresión regular va a buscar todas las coincidencias que sean 'a' en un rango de 3 a 5 apariciones, es decir, 'aaa', 'aaaa' y 'aaaaa'.
############################################################### FIN #######


___________________________________________________________________________
###########################################################################
===========================================================================
  r'\w[-\w\.]*@\w[-\w]*(\.\w[-\w]*)+'
################################# INICIO ##################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
description: Esta expresion es utilizada para lahabilitacion de correo
############################################################### FIN #######



___________________________________________________________________________
###########################################################################
===========================================================================
  EXPRESIONES AVANZADAS PARA EXPRESIONES REGULARES
################################# INICIO ##################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
BIBLIOTECA ESTÁNDAR RE
La biblioteca estándar re provee funciones que permiten realizar operaciones de búsquedas de coincidencias basados en expresiones regulares. Las funciones que fueron utilizadas en esta unidad son:

re.match(): Si cero o más caracteres al inicio de una cadena coinciden con el patrón de expresión regular, devuelve un objeto tipo match. En caso que ninguna posición de la cadena coincida con el patrón, devuelve None.
re.search(pattern, string): Explora toda la cadena en búsqueda de la primera ubicación donde el patrón de expresión regular produce una coincidencia y devuelve un objeto tipo match. En caso que ninguna posición de la cadena coincida con el patrón, devuelve None.
re.finditer(): Devuelve un iterator que produce objetos tipo match de todas las coincidencias encontradas en una cadena que no se superpongan para el patrón de expresión regular dado. La cadena es explorada de izquierda a derecha, y las coincidencias son devueltas en el orden en que fueron encontradas. El iterador es utilizado junto con la estructura de repetición for para iterar sobre todas las coincidencias encontradas.
Tal como te das cuenta, las tres funciones devuelve un objeto tipo Match. De acuerdo con la documentación, los objetos Match siempre tienen el valor boleano True; y dado que las funciones match() y search() devuelven None cuando no encuentran una coincidencia, es posible evaluar si hubo o no coincidencias utilizando la estructura de control if.

match = re.search(pattern,string)
if match:
#Escribe el proceso a realizarse si se encuentra una coincidencia.
Los objetos Match poseen diferentes métodos y atributos, los cuales puedes revisar de forma detallada en la documentación. Los métodos utilizados en esta unidad son:

match.group(): Devuelve uno o más subgrupos de las coincidencias encontradas. Si solo tiene un argumento, entonces devuelve una sola cadena, si por el contrario se tienen varios argumentos, el resultado es una tupla con un elemento por argumento.
match.groups(): Devuelve una tupla que contiene todos los subgrupos de la coincidencias.
match.start(): Devuelve el índice del inicio de la subcadena que coincide con el patrón de expresión regular.
match.end: Devuelve el índice del final de la subcadena que coincide con el patrón de expresión regular.
match.span(): Devuelve una tupla que contiene el índice de inicio y final de la subcadena que coincide con el patrón de expresión regular.
match.re: Devuelve el objeto expresión regular cuyo método match() o search() produjo esta instancia.
match.string: Devuelve la cadena de caracteres utilizada como argumento en las funciones match() o search().
############################################################### FIN #######


